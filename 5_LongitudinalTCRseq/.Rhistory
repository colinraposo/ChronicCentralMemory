geom_smooth(method = "lm", color = "red", fill = "transparent") +
facet_wrap(~Sample, scales = "free") +
stat_cor() + scale_x_log10() + scale_y_log10() + theme_bw() + ggtitle("all clones")
# average clone clounts across replicates
## make vector only where clone is in both replicates
both.rep.clones <- cdr3.df %>% pivot_wider(id_cols = c(CDR3.nuc. , Sample), values_from = copy, names_from = Rep, values_fn = {sum}) %>%
mutate(across(everything(), ~ ifelse(is.na(.), 0, .))) %>%
filter(R1 >0, R2 > 0) %>%
dplyr::select(CDR3.nuc.) %>% c()
## create new clone.df with average reads per sample
clone.df <- cdr3.df %>% filter(Sample != "PosCtrl_m20210506", CDR3.nuc. %in% both.rep.clones$CDR3.nuc.) %>% # remove postive control, select only shared clones
group_by(Rep, Sample, CDR3.nuc.) %>% mutate(ReadFrac = sum (copy)) %>% ungroup() %>% # any TCRs with the same CDR3 add together
group_by(Rep, Sample) %>% mutate(ReadFrac = copy / sum (copy)) %>% # convert copies to fraction of reads
ungroup() %>% group_by(Sample, CDR3.nuc.) %>% dplyr::select(-c(Rep, copy)) %>% summarise(ReadFrac = mean(ReadFrac)) %>% # average read fraction between the two reads
dplyr::rename(TRB_CDR3 = "CDR3.nuc.")
# add in cell numbers from sort - adjust the read fractions to cell #
sampleinfo <- read_xlsx(paste0(path, "/C103_CellNumberForbTCR.xlsx")) %>%
mutate(Sample = str_replace_all(Sample, " ", "_")) %>% dplyr::select("Sample", "ActualCellNumbner_FlowData", "SortedCellNumber") %>%
dplyr::rename(TotalCellNumber = "ActualCellNumbner_FlowData")
clone.df <- merge(clone.df, sampleinfo, by = "Sample") %>%
mutate(TotalNumber = ReadFrac * TotalCellNumber, SortedNumber = ReadFrac * SortedCellNumber) %>%
ungroup()
# separate DF for all phnotype sorting vs tet sorting
clone.df.pheno <- clone.df %>% filter(Sample != "C103_GP33neg",Sample != "C103_GP33pos") %>%
### mutate sample ID into more useful metadata
separate(Sample, into = c('experiment', 'dpi', 'group', 'sort')) %>%
mutate(TRB_CDR3 = paste(group, TRB_CDR3, sep = "_")) %>%
### TotalNumberClone is number of cells per SPL or per 100uL - this is for determining the clonal behavior
### SortedNumberClone is the number of cells actually sorted - this is for determining how deeply we actually sequenced
group_by(TRB_CDR3, dpi, group) %>% mutate(TotalNumberClone = sum(TotalNumber), SortedNumberClone = sum(SortedNumber)) %>% ungroup() %>%
### CloneFreq is a given clones frequemcy compared to all other clones in the timepoint
group_by(dpi, group) %>% mutate(CloneFreq = TotalNumberClone/sum(TotalNumberClone)) %>% ungroup() %>%
### remove cell number info from sorting data, leave only clones #s
dplyr::select(-c(TotalCellNumber, SortedCellNumber))
# rename cells by new names for celltypes
clone.df.pheno <- clone.df.pheno %>%
mutate(sort = case_when(
sort == "cTcm" ~ "Tcm",
sort == "Prog"  ~ "Tex-Prog",
sort == "Term"  ~ "Tex-Term",
sort == "Int" & dpi == "d100" ~ "Tem_2",
sort == "KLR" & dpi == "d100" ~ "Tem_1",
sort == "Int" & dpi != "d100" ~ "Tex-Int",
sort == "KLR" & dpi != "d100" ~ "Tex-KLR"
))
# check phenotypes
table(clone.df.pheno$sort, clone.df.pheno$dpi, clone.df.pheno$group)
# visualize clone sizes
clone.df.pheno %>% ggplot(aes(x = SortedNumberClone, y = ReadFrac)) +
geom_point(alpha = 0.1) + facet_wrap(group~dpi) +
scale_x_log10() + scale_y_log10() + geom_vline(xintercept = 10, color = "red", linetype = "dashed")
# isoalte clones detected at d100 and also at at least one timepoint in the blood
## blood d21 and 35
d21.clones <- clone.df.pheno %>% filter(SortedNumberClone >= 10, dpi == "d21")
d35.clones <- clone.df.pheno %>% filter(SortedNumberClone >= 10, dpi == "d35")
blood.clones <- c(d21.clones$TRB_CDR3, d35.clones$TRB_CDR3) %>% unique()
## spleen d100+
d100.clones <- clone.df.pheno %>% filter(SortedNumberClone >= 10, dpi == "d100")
# set clones of interest as those found in the blood and the spleen
clones.of.interest <-  intersect(blood.clones, d100.clones$TRB_CDR3)
# day 21 ==============================================================
clone.freq.d21 <- clone.df.pheno %>%
filter(TRB_CDR3 %in% clones.of.interest) %>%
mutate(freq = (TotalNumber/TotalNumberClone)) %>%
dplyr::select(sort, dpi, TRB_CDR3, freq, CloneFreq) %>%
filter(dpi == "d21")
wide <- clone.freq.d21 %>%
pivot_wider(names_from = sort, values_from = freq) %>%
mutate(across(everything(), ~ ifelse(is.na(.), 0, .))) %>%
filter(TRB_CDR3 %in% clones.of.interest) %>%
separate(TRB_CDR3, into = c("Group", "TRB_CDR3"))
kmeans <- wide %>% select(-c(dpi, TRB_CDR3, Group, CloneFreq, Group)) %>% kmeans(centers = 4)
wide$Cluster <- kmeans$cluster
wide %>% ungroup() %>% select(-c(dpi, TRB_CDR3,Group, CloneFreq, Cluster)) %>%
Heatmap(split = wide$Cluster, col = brewer.pal(9, "Blues"), border = T, column_title = "Day 21")
# day 35 ==============================================================
clone.freq.d35 <- clone.df.pheno %>%
filter(TRB_CDR3 %in% clones.of.interest) %>%
mutate(freq = (TotalNumber/TotalNumberClone)) %>%
dplyr::select(sort, dpi, TRB_CDR3, freq, CloneFreq) %>%
filter(dpi == "d35")
wide <- clone.freq.d35 %>%
pivot_wider(names_from = sort, values_from = freq) %>%
mutate(across(everything(), ~ ifelse(is.na(.), 0, .))) %>%
filter(TRB_CDR3 %in% clones.of.interest) %>%
separate(TRB_CDR3, into = c("Group", "TRB_CDR3"))
kmeans <- wide %>% select(-c(dpi, TRB_CDR3, Group, CloneFreq, Group)) %>% kmeans(centers = 4)
wide$Cluster <- kmeans$cluster
wide %>% ungroup() %>% select(-c(dpi, TRB_CDR3,Group, CloneFreq, Cluster)) %>%
Heatmap(split = wide$Cluster, col = brewer.pal(9, "Blues"), border = T, column_title = "Day 35" , name = "freq of clone")
# day 100 ==============================================================
clone.freq.d100 <- clone.df.pheno %>%
filter(TRB_CDR3 %in% clones.of.interest) %>%
mutate(freq = (TotalNumber/TotalNumberClone)) %>%
dplyr::select(sort, dpi, TRB_CDR3, freq, CloneFreq) %>%
filter(dpi == "d100")
wide <- clone.freq.d100 %>%
pivot_wider(names_from = sort, values_from = freq) %>%
mutate(across(everything(), ~ ifelse(is.na(.), 0, .))) %>%
filter(TRB_CDR3 %in% clones.of.interest) %>%
separate(TRB_CDR3, into = c("Group", "TRB_CDR3"))
kmeans <- wide %>% select(-c(dpi, TRB_CDR3, Group, CloneFreq, Group)) %>% kmeans(centers = 7)
wide$Cluster <- kmeans$cluster
wide %>% ungroup() %>% select(-c(dpi, TRB_CDR3,Group, CloneFreq, Cluster)) %>%
Heatmap(split = wide$Cluster, col = brewer.pal(9, "Blues"), border = T, column_title = "Day 100+", name = "freq of clone")
#### all Timpoints =============================================
all.tp.wide <- rbind(clone.freq.d21, clone.freq.d35) %>%
rbind(clone.freq.d100) %>%
mutate(sort = paste(dpi,sort, sep = "___")) %>%
select(-c(CloneFreq, dpi)) %>%
pivot_wider(names_from = sort, values_from = freq) %>%
mutate(across(everything(), ~ ifelse(is.na(.), 0, .)))
# heatmap of clones across TP
all.tp.wide %>% ungroup() %>% select(-c(TRB_CDR3)) %>%
Heatmap(col = brewer.pal(9, "Blues"), border = T, cluster_columns = F, column_title = "Correlation of Clone Freq", show_row_dend = F, name = "Freq of clone at timepoint")
# check to make sure correlation between subsets
all.tp.wide %>% ungroup() %>% select(-c(TRB_CDR3)) %>% cor() %>% Heatmap(name = "Pearson R", col = brewer.pal(9, "BrBG"))
# clone frequency - clone and phenotype as proportion of all cells at that timepoint
clone.freq.longitudinal <- clone.df.pheno %>%
mutate(freq = (TotalNumber/TotalNumberClone)*CloneFreq) %>% dplyr::select(sort, dpi, TRB_CDR3, freq, CloneFreq, CloneFreq) %>%
mutate(name = paste(dpi, sort, sep = "--")) %>%
dplyr::select(TRB_CDR3, name, freq)%>% pivot_wider(values_from = freq) %>%
mutate(across(everything(), ~ ifelse(is.na(.), 0, .))) %>%
filter(TRB_CDR3 %in% clones.of.interest)
head(clone.freq.longitudinal)
# Transpose the desired data for correlation
df_transposed <- dplyr::select(clone.freq.longitudinal, -TRB_CDR3) %>% t
# Calculate the correlation matrix
correlation_matrix <- cor(df_transposed, use = "pairwise.complete.obs", method = "pearson")
# Convert correlation to distance matrix and perform hierarchical clustering
dist_matrix <- as.dist(1 - correlation_matrix)
hc <- hclust(dist_matrix, method = "complete")
plot(hc) # Plot dendrogram
# Cut tree into k clusters
set.seed(23)
clusters <- cutree(hc, k=8)
# add behavior info to clone.freq.longitudinal
clone.freq.longitudinal$Behavior <- paste0("T_" , clusters)
# # rename behaviors - group by pattern of expansion or contraction
clone.freq.longitudinal <- clone.freq.longitudinal %>% mutate(Behavior = case_when(
Behavior == "T_1"  ~ "Traj_1", # contracting
Behavior == "T_5"  ~ "Traj_2",
Behavior == "T_8"  ~ "Traj_3",
Behavior == "T_7"  ~ "Traj_4",
Behavior == "T_4"  ~ "Traj_5", # expand then contract
Behavior == "T_6"  ~ "Traj_6",
Behavior == "T_2"  ~ "Traj_7", # expand whole time
Behavior == "T_3"  ~ "Traj_8"
))
# mutate metadata of clone.freq.longitudinal
clone.freq.longitudinal <- clone.freq.longitudinal %>% separate(TRB_CDR3, into = c("group", "CDR3")) %>%
mutate(group = ifelse(group ==  "Ctrl" , "PBS", "aPDL1")) %>%
mutate(group = factor(group, levels = c("PBS", "aPDL1")))
# plot heatmap with clusters
hm <- Heatmap(correlation_matrix,
name = "Pearson R",
column_title = "Pairwise Clone Correlations",
# col = viridis(9),
col = brewer.pal(9, "RdBu") %>% rev(),
show_row_names = FALSE,show_column_names = FALSE,
cluster_rows = TRUE, cluster_columns = TRUE, show_row_dend = F, show_column_dend = F,
left_annotation = rowAnnotation(` `  = clone.freq.longitudinal$Behavior, show_legend = F, col = list (` ` = traj_pal)),
top_annotation = columnAnnotation(` `  = clone.freq.longitudinal$Behavior, show_legend = F, col = list (` ` = traj_pal)),
column_split = clone.freq.longitudinal$Behavior, row_split = clone.freq.longitudinal$Behavior,
row_title_rot = 0,
border = FALSE, row_gap = unit(0, "cm"), column_gap = unit(0, "cm"),
height = unit(3, "in"), width = unit(3, "in")
# use_raster = T
)
hm
# summary plots for clone behaviors
data_long <- clone.freq.longitudinal %>%
pivot_longer(cols = -c(group, CDR3, Behavior),
names_to = c("Day", "Sort"),
names_sep = "--",
values_to = "Value")
# summarize behavior per timepoint
data_summary <- data_long %>%
group_by(Behavior, Day, Sort) %>%
summarise(Average_Value = mean(Value, na.rm = TRUE)) %>%
ungroup()
plot.pheno <- data_summary  %>%
mutate(Day = case_when(
Day == "d21" ~ "21 dpi",
Day == "d35"  ~ "35 dpi",
Day == "d100"  ~ "100+ dpi")) %>%
ggplot(aes(x = Day, y = Average_Value, fill = Sort, group = Sort)) +
geom_col() +
facet_wrap(~Behavior, ncol = 4, scales = "free") +
scale_x_discrete(limits = c("21 dpi", "35 dpi", "100+ dpi")) +
scale_fill_manual(values = pop.pal) +
plot.theme + rotate_x_text(45) + labs(x = "Timepoint", y = "Freq of Cells (Avg. per Clone)") +
scale_y_continuous(expand = expansion(mult = c(0.0, 0.05)), labels = function(x) format(x, scientific = TRUE)) +
theme(legend.position = "none")
plot.pheno
# ggsave(filename = "12_CycloneTrajectories_AvgClone.pdf", width = 8, height = 5.5, path = outs)
data_summary %>% group_by(Day, Behavior) %>% mutate(n = Average_Value/sum(Average_Value))
# new dataframe to hold longitudinal data
df_totalfreq <- clone.freq.longitudinal %>%
rowwise() %>%
mutate(
d21Prop = sum(c_across(starts_with("d21"))),
d35Prop = sum(c_across(starts_with("d35"))),
d100Prop = sum(c_across(starts_with("d100")))
) %>%
ungroup()
# Step 2: Reshape data from wide to long
df_long <- df_totalfreq %>%
select(group, CDR3, Behavior, d21Prop, d35Prop, d100Prop) %>%
pivot_longer(
cols = c(d21Prop, d35Prop, d100Prop),
names_to = "TimePoint",
values_to = "Proportion"
) %>%
mutate(TimePoint = factor(TimePoint, levels = c("d21Prop", "d35Prop", "d100Prop")))
df_avg <- df_long %>%
group_by(group, TimePoint, Behavior) %>%
summarise(AvgProportion = mean(Proportion, na.rm = TRUE), .groups = 'drop')
# Create the modified plot
plot.prop <- ggplot() +
# Add individual lines with low alpha
geom_line(data = df_long, aes(x = TimePoint, y = Proportion, group = interaction(group, CDR3), color = group), alpha = 0.1) +
# Add average lines on top
geom_line(data = df_avg, aes(x = TimePoint, y = AvgProportion, group = group, color = group), size = 1) +
facet_wrap(~ Behavior, ncol = 4) +
plot.theme +
labs(x = "Timepoint", y = "Freq of Cells (Log Scale)", color = "Group") +
scale_x_discrete(labels = c("21 dpi", "35 dpi", "100+ dpi")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c(group.pal), name = "Group") +
scale_y_log10() +
theme(legend.position = "none")
df_avg2 <- df_long %>%
group_by(TimePoint, Behavior) %>%
summarise(AvgProportion = mean(Proportion), sem = sd(Proportion)/sqrt(length(Proportion))) %>%
mutate(trend = ifelse(Behavior %in% c(paste0("Traj_", 1:4)),"Contracting", "Expanding"))
df_avg2
fig5v8.plot1 <- df_avg2  %>%
ggplot(aes(x = TimePoint, color = Behavior, y = AvgProportion)) +
geom_errorbar(aes(ymin = AvgProportion - sem, ymax = AvgProportion + sem), width = 0.05) +
geom_line(aes(group = Behavior)) +
geom_point(size = 1.5) +
facet_wrap(~trend, scales = "free") +
ylim(0,0.0016) +
plot.theme +
scale_x_discrete(labels = c("21 dpi", "35 dpi", "100+ dpi")) + labs(x = "Timepoint", y = "Freq of Cells", color = "Trajectory") +
scale_color_manual(values = brewer.pal(10, "Paired")) + rotate_x_text(45) +
theme(legend.position = "none")
fig5v8.plot1
# ggsave(filename = "12_CycloneTrajectories_SizeAverages.pdf", width = 6, height = 3, path = outs)
plot.prop
# plot all clones sizes
ggplot(data = df_long) +
# Add individual lines with low alpha
geom_line(aes(x = TimePoint, y = Proportion), alpha = 0.1) +
# Add average lines on top
facet_wrap(~ Behavior, ncol = 4) +
plot.theme +
labs(x = "Timepoint", y = "Freq of Cells (Log Scale)", color = "Group") +
scale_x_discrete(labels = c("21 dpi", "35 dpi", "100+ dpi")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c(group.pal), name = "Group") +
scale_y_log10() +
theme(legend.position = "none")
# plot all clones sizes
ggplot(data = df_long) +
# Add individual lines with low alpha
geom_line(aes(x = TimePoint, y = Proportion, group = interaction(CDR3)), alpha = 0.1) +
# Add average lines on top
facet_wrap(~ Behavior, ncol = 4) +
plot.theme +
labs(x = "Timepoint", y = "Freq of Cells (Log Scale)", color = "Group") +
scale_x_discrete(labels = c("21 dpi", "35 dpi", "100+ dpi")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c(group.pal), name = "Group") +
scale_y_log10() +
theme(legend.position = "none")
# plot all clones sizes
ggplot(data = df_long) +
# Add individual lines with low alpha
geom_line(aes(x = TimePoint, y = Proportion, group = interaction(CDR3)), alpha = 0.1) +
facet_wrap(~ Behavior, ncol = 4) +
plot.theme +
labs(x = "Timepoint", y = "Freq of Cells (Log Scale)") +
scale_x_discrete(labels = c("21 dpi", "35 dpi", "100+ dpi")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c(group.pal), name = "Group") +
scale_y_log10()
# plot all clones sizes
ggplot(data = df_long) +
# Add individual lines with low alpha
geom_line(aes(x = TimePoint, y = Proportion, group = interaction(CDR3)), alpha = 0.1) +
facet_wrap(~ Behavior, ncol = 4) +
labs(x = "Timepoint", y = "Freq of Cells (Log Scale)") +
scale_x_discrete(labels = c("21 dpi", "35 dpi", "100+ dpi")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c(group.pal), name = "Group") +
scale_y_log10()
# new dataframe to hold longitudinal data
df_totalfreq <- clone.freq.longitudinal %>%
rowwise() %>%
mutate(
d21Prop = sum(c_across(starts_with("d21"))),
d35Prop = sum(c_across(starts_with("d35"))),
d100Prop = sum(c_across(starts_with("d100")))
) %>%
ungroup()
# Step 2: Reshape data from wide to long
df_long <- df_totalfreq %>%
select(group, CDR3, Behavior, d21Prop, d35Prop, d100Prop) %>%
pivot_longer(
cols = c(d21Prop, d35Prop, d100Prop),
names_to = "TimePoint",
values_to = "Proportion"
) %>%
mutate(TimePoint = factor(TimePoint, levels = c("d21Prop", "d35Prop", "d100Prop")))
# plot all clones sizes
ggplot(data = df_long) +
# Add individual lines with low alpha
geom_line(aes(x = TimePoint, y = Proportion, group = interaction(CDR3)), alpha = 0.1) +
facet_wrap(~ Behavior, ncol = 4) +
labs(x = "Timepoint", y = "Freq of Cells (Log Scale)") +
scale_x_discrete(labels = c("21 dpi", "35 dpi", "100+ dpi")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c(group.pal), name = "Group") +
scale_y_log10()
df_avg2 <- df_long %>%
group_by(TimePoint, Behavior) %>%
summarise(AvgProportion = mean(Proportion), sem = sd(Proportion)/sqrt(length(Proportion))) %>%
mutate(trend = ifelse(Behavior %in% c(paste0("Traj_", 1:4)),"Contracting", "Expanding"))
plot <- df_avg2  %>%
ggplot(aes(x = TimePoint, color = Behavior, y = AvgProportion)) +
geom_errorbar(aes(ymin = AvgProportion - sem, ymax = AvgProportion + sem), width = 0.05) +
geom_line(aes(group = Behavior)) +
geom_point(size = 1.5) +
facet_wrap(~trend, scales = "free") +
ylim(0,0.0016) +
plot.theme +
scale_x_discrete(labels = c("21 dpi", "35 dpi", "100+ dpi")) + labs(x = "Timepoint", y = "Freq of Cells", color = "Trajectory") +
scale_color_manual(values = brewer.pal(10, "Paired")) + rotate_x_text(45) +
theme(legend.position = "none")
plot
# merge together clone behaviors and clone frequency of given clone at that timepong
all.tp.withclusters <- merge(x = clone.freq.longitudinal %>% select(group, CDR3, Behavior),
y = all.tp.wide %>% separate(TRB_CDR3, into = c("group", "CDR3")) %>% # from above chunk looking at individual TP
mutate(group = ifelse(group ==  "Ctrl" , "PBS", "aPDL1")) %>%
mutate(group = factor(group, levels = c("PBS", "aPDL1"))))
split.vector <- all.tp.withclusters %>% select(-c(group, CDR3, Behavior, Behavior)) %>% colnames() %>% substr(0,4)
all.tp.withclusters %>% select(-c(group, CDR3, Behavior, Behavior)) %>%
Heatmap(col = brewer.pal(9, "Blues"), border = T, cluster_columns = T, split = all.tp.withclusters$Behavior, row_title_rot = 0, column_split = split.vector, cluster_column_slices = T)
all.tp.withclusters
# look at clones on a heatmap
d100.clones %>% pivot_longer(-c(group, CDR3,Long_Traj)) %>%
group_by(name, Long_Traj, group) %>% mutate(value = mean(value), nclones = length(CDR3)) %>%
ggplot(aes(x = name, y = Long_Traj, size = nclones, color = value)) + geom_point() + facet_wrap(~group) +
plot.theme.box + rotate_x_text(45) + scale_color_distiller(palette = "Greys", direction = "rev")
d100.clones <- all.tp.withclusters %>% select(group, CDR3, Behavior, d100___Tcm, d100___Tem_2, d100___Tem_1, `d100___Tex-Prog` , `d100___Tex-Term`) %>%
rename(Long_Traj = Behavior,
Tcm = d100___Tcm,
Tem_2 = d100___Tem_2,
Tem_1 = d100___Tem_1,
`Tex-Prog` = `d100___Tex-Prog` ,
`Tex-Term` = `d100___Tex-Term`)
# look at clones on a heatmap
d100.clones %>% pivot_longer(-c(group, CDR3,Long_Traj)) %>%
group_by(name, Long_Traj, group) %>% mutate(value = mean(value), nclones = length(CDR3)) %>%
ggplot(aes(x = name, y = Long_Traj, size = nclones, color = value)) + geom_point() + facet_wrap(~group) +
plot.theme.box + rotate_x_text(45) + scale_color_distiller(palette = "Greys", direction = "rev")
d100.clones %>% select(-c(CDR3, group, Long_Traj)) %>% Heatmap(row_split = d100.clones$Long_Traj, col = brewer.pal(9, "Purples"), border = T, row_title_rot = 0)
# select only 100+ dpi phenotype
d100.clones <- all.tp.withclusters %>% select(group, CDR3, Behavior, d100___Tcm, d100___Tem_2, d100___Tem_1, `d100___Tex-Prog` , `d100___Tex-Term`) %>%
rename(Long_Traj = Behavior,
Tcm = d100___Tcm,
Tem_2 = d100___Tem_2,
Tem_1 = d100___Tem_1,
`Tex-Prog` = `d100___Tex-Prog` ,
`Tex-Term` = `d100___Tex-Term`)
# look at which clones form what at d100+
d100.clones %>% pivot_longer(-c(group, CDR3,Long_Traj)) %>%
group_by(name, Long_Traj, group) %>% mutate(freqency = mean(value), nclones = length(CDR3)) %>%
ggplot(aes(x = name, y = Long_Traj, size = nclones, color = freqency)) + geom_point() + facet_wrap(~group) +
plot.theme.box + rotate_x_text(45) + scale_color_distiller(palette = "Greys", direction = "rev")
d100.clones %>% select(-c(CDR3, group, Long_Traj)) %>% Heatmap(row_split = d100.clones$Long_Traj, col = brewer.pal(9, "Purples"), border = T, row_title_rot = 0)
# Function to calculate fate bias significance
calculate_fate_bias_significance <- function(M, m, N, n) {
# Perform one-sided hypergeometric test
p_value <- phyper(m - 1, n, N - n, M, lower.tail = FALSE)
# Example usage:
# M: total cells in differentiated states for this clone
# m: cells in the fate cluster of interest for this clone
# N: total cells in differentiated states across all clones
# n: total cells in the fate cluster of interest across all clones
return(p_value)
}
# get data from each clone - add proper values for M m N n
bias.df <-
clone.freq.longitudinal %>% pivot_longer(cols = -c(group,CDR3, Behavior), names_to = "Pop", values_to = "n") %>%
filter(grepl("d100", Pop)) %>%
mutate(n = n*1e6) %>%
group_by(Pop) %>% mutate(Total_Count_Sort = sum(n)) %>% ungroup() %>% # add total cells per sort across clones (n)
group_by(group,CDR3) %>% mutate(Total_Count_Clone = sum(n))  %>% ungroup() %>% # add total cells per clone (M)
mutate(Total_Count_Total = sum(n)) %>% # add the total number of cells (N)
dplyr::rename(N = Total_Count_Total, M = Total_Count_Clone, n = Total_Count_Sort, m = n)
# calulte one-sided hypergeometric test
bias.df$p_value <- mapply(calculate_fate_bias_significance, bias.df$M, bias.df$m, bias.df$N, bias.df$n)
bias.df$p_value_adj <-  p.adjust(bias.df$p_value , method = "hochberg")
# look on a heatmap
bias.wide <- bias.df %>% pivot_wider(names_from = Pop, values_from = p_value_adj, id_cols = c(group, CDR3, Behavior))
bias.wide %>% select(-c(group, CDR3, Behavior))  %>% Heatmap()
# select lowest P vlaue per clone
biases <- bias.wide %>% select(c("d100--Tcm" ,"d100--Tem_2", "d100--Tem_1","d100--Tex-Prog", "d100--Tex-Term")) %>%
rowwise() %>%  # Enable row-wise operations
mutate(
pval = min(c_across(contains("d100")), na.rm = TRUE),  # Find the minimum value across "d100" columns
min_p = names(.)[which.min(c_across(contains("d100")))]  # Find the name of the column with the minimum value
) %>%
mutate(min_p = ifelse(pval < 0.05, min_p, "ns")) %>%
cbind(bias.wide %>% select(group, CDR3, Behavior)) %>%
mutate(min_p = case_when(
min_p == "d100--Tcm" ~ "Tcm",
min_p == "d100--Tem_2"  ~ "Tem_2",
min_p == "d100--Tem_1"  ~ "Tem_1",
min_p == "d100--Tex-Prog"  ~ "Tex-Prog",
min_p == "d100--Tex-Term"  ~ "Tex-Term",
min_p == "ns" ~ "No Bias")
)
biases %>% count(group, Behavior, min_p) %>%
# group_by(Behavior, group) %>% mutate(n = n/sum(n)) %>%
group_by(min_p) %>% mutate(order = sum(n)) %>%
ggplot(aes(x = fct_reorder(min_p , order), y = n, fill=Behavior)) +
geom_col(show.legend = F) +
facet_wrap(~group, scales = "free") +
plot.theme + rotate_x_text(45) +
scale_fill_manual(values = traj_pal) +
labs(x = "Clonal Bias 100+ dpi", y = "# of clones") +
scale_y_continuous(expand = expansion(mult = c(0.0, 0.05)))
# select only 100+ dpi phenotype
d100.clones <- all.tp.withclusters %>% select(group, CDR3, Behavior, d100___Tcm, d100___Tem_2, d100___Tem_1, `d100___Tex-Prog` , `d100___Tex-Term`) %>%
rename(Long_Traj = Behavior,
Tcm = d100___Tcm,
Tem_2 = d100___Tem_2,
Tem_1 = d100___Tem_1,
`Tex-Prog` = `d100___Tex-Prog` ,
`Tex-Term` = `d100___Tex-Term`)
# look at which clones form what at d100+
d100.clones %>% pivot_longer(-c(group, CDR3,Long_Traj)) %>%
group_by(name, Long_Traj, group) %>% mutate(freqency = mean(value), nclones = length(CDR3)) %>%
ggplot(aes(x = name, y = Long_Traj, size = nclones, color = freqency)) + geom_point() + facet_wrap(~group) +
plot.theme.box + rotate_x_text(45) + scale_color_distiller(palette = "Greys", direction = "rev")
<- d100.clones %>% select(-c(CDR3, group, Long_Traj)) %>% Heatmap(row_split = d100.clones$Long_Traj, col = brewer.pal(9, "Purples"), border = T, row_title_rot = 0, name = "% of clone")
# select only 100+ dpi phenotype
d100.clones <- all.tp.withclusters %>% select(group, CDR3, Behavior, d100___Tcm, d100___Tem_2, d100___Tem_1, `d100___Tex-Prog` , `d100___Tex-Term`) %>%
rename(Long_Traj = Behavior,
Tcm = d100___Tcm,
Tem_2 = d100___Tem_2,
Tem_1 = d100___Tem_1,
`Tex-Prog` = `d100___Tex-Prog` ,
`Tex-Term` = `d100___Tex-Term`)
# look at which clones form what at d100+
d100.clones %>% pivot_longer(-c(group, CDR3,Long_Traj)) %>%
group_by(name, Long_Traj, group) %>% mutate(freqency = mean(value), nclones = length(CDR3)) %>%
ggplot(aes(x = name, y = Long_Traj, size = nclones, color = freqency)) + geom_point() + facet_wrap(~group) +
plot.theme.box + rotate_x_text(45) + scale_color_distiller(palette = "Greys", direction = "rev")
hm.prop <- d100.clones %>% select(-c(CDR3, group, Long_Traj)) %>% Heatmap(row_split = d100.clones$Long_Traj, col = brewer.pal(9, "Purples"), border = T, row_title_rot = 0, name = "% of clone")
# Function to calculate fate bias significance
calculate_fate_bias_significance <- function(M, m, N, n) {
# Perform one-sided hypergeometric test
p_value <- phyper(m - 1, n, N - n, M, lower.tail = FALSE)
# Example usage:
# M: total cells in differentiated states for this clone
# m: cells in the fate cluster of interest for this clone
# N: total cells in differentiated states across all clones
# n: total cells in the fate cluster of interest across all clones
return(p_value)
}
# get data from each clone - add proper values for M m N n
bias.df <-
clone.freq.longitudinal %>% pivot_longer(cols = -c(group,CDR3, Behavior), names_to = "Pop", values_to = "n") %>%
filter(grepl("d100", Pop)) %>%
mutate(n = n*1e6) %>%
group_by(Pop) %>% mutate(Total_Count_Sort = sum(n)) %>% ungroup() %>% # add total cells per sort across clones (n)
group_by(group,CDR3) %>% mutate(Total_Count_Clone = sum(n))  %>% ungroup() %>% # add total cells per clone (M)
mutate(Total_Count_Total = sum(n)) %>% # add the total number of cells (N)
dplyr::rename(N = Total_Count_Total, M = Total_Count_Clone, n = Total_Count_Sort, m = n)
# calulte one-sided hypergeometric test
bias.df$p_value <- mapply(calculate_fate_bias_significance, bias.df$M, bias.df$m, bias.df$N, bias.df$n)
bias.df$p_value_adj <-  p.adjust(bias.df$p_value , method = "hochberg")
# look on a heatmap and set clone as biased when
bias.wide <- bias.df %>% mutate(p_value_adj = -log10(p_value_adj)) %>%
pivot_wider(names_from = Pop, values_from = p_value_adj, id_cols = c(group, CDR3, Behavior))
hm.hyper <- bias.wide %>% select(-c(group, CDR3, Behavior)) %>% Heatmap(name = "-log10 P")
hm.prop + hm.hyper
hm.hyper
# look on a heatmap and set clone as biased when
bias.wide <- bias.df %>% mutate(p_value_adj = ifelse(is.na(p_value_adj, 1 , p_value_adj))) %>%
mutate(p_value_adj = -log10(p_value_adj)) %>%
pivot_wider(names_from = Pop, values_from = p_value_adj, id_cols = c(group, CDR3, Behavior))
# look on a heatmap and set clone as biased when
bias.wide <- bias.df %>% mutate(p_value_adj = ifelse(is.na(p_value_adj), 1 , p_value_adj)) %>%
mutate(p_value_adj = -log10(p_value_adj)) %>%
pivot_wider(names_from = Pop, values_from = p_value_adj, id_cols = c(group, CDR3, Behavior))
hm.hyper <- bias.wide %>% select(-c(group, CDR3, Behavior)) %>% Heatmap(name = "-log10 P")
hm.hyper
hm.hyper <- bias.wide %>% select(-c(group, CDR3, Behavior)) %>% Heatmap(name = "P")
# look on a heatmap and set clone as biased when
bias.wide <- bias.df %>%
pivot_wider(names_from = Pop, values_from = p_value_adj, id_cols = c(group, CDR3, Behavior))
hm.hyper <- bias.wide %>% select(-c(group, CDR3, Behavior)) %>% Heatmap(name = "P")
hm.hyper
hm.prop + hm.hyper
hm.hyper
hm.hyper
